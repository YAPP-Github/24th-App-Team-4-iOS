//
//  PokitCategorySettingFeature.swift
//  Feature
//
//  Created by ÍπÄÎØºÌò∏ on 7/25/24.

import Foundation

import ComposableArchitecture
import DSKit
import Domain
import CoreKit
import Util

/// - ÏÇ¨Ïö©ÎêòÎäî API Î™©Î°ù
/// 1. Profile üé®
/// 2. Ìè¨ÌÇ∑ ÏÉùÏÑ± üñ®Ô∏è
@Reducer
public struct PokitCategorySettingFeature {
    /// - Dependency
    @Dependency(\.dismiss) var dismiss
    @Dependency(\.pasteboard) var pasteboard
    @Dependency(\.categoryClient) var categoryClient
    /// - State
    @ObservableState
    public struct State: Equatable {
        fileprivate var domain: PokitCategorySetting
        
        var selectedProfile: BaseCategoryImage? {
            get { domain.categoryImage }
            set { domain.categoryImage = newValue }
        }
        var categoryName: String {
            get { domain.categoryName }
            set { domain.categoryName = newValue }
        }
        var profileImages: [BaseCategoryImage] {
            get { domain.imageList }
        }
        var itemList: IdentifiedArrayOf<BaseCategoryItem>? {
            guard let categoryList = domain.categoryListInQuiry.data else {
                return nil
            }
            var identifiedArray = IdentifiedArrayOf<BaseCategoryItem>()
            categoryList.forEach { category in
                identifiedArray.append(category)
            }
            return identifiedArray
        }
        
        let type: SettingType
        var isProfileSheetPresented: Bool = false
        var pokitNameTextInpuState: PokitInputStyle.State = .default
        /// - Ìè¨ÌÇ∑ ÏàòÏ†ï API / Ï∂îÍ∞Ä API
        /// categoryName
        /// categoryImageId
        /// categoryId (Ìè¨ÌÇ∑ ÏàòÏ†ïÏö©)
    
        public init(
            type: SettingType,
            categoryId: Int? = nil,
            categoryImage: BaseCategoryImage? = nil,
            categoryName: String? = ""
        ) {
            self.type = type
            self.domain = .init(
                categoryId: categoryId,
                categoryName: categoryName,
                categoryImage: categoryImage
            )
        }
    }
    
    /// - Action
    public enum Action: FeatureAction, ViewAction {
        case view(View)
        case inner(InnerAction)
        case async(AsyncAction)
        case scope(ScopeAction)
        case delegate(DelegateAction)
        
        @CasePathable
        public enum View: BindableAction, Equatable {
            case binding(BindingAction<State>)
            case dismiss
            case profileSettingButtonTapped
            case saveButtonTapped
            case onAppear
        }
        
        public enum InnerAction: Equatable {
            case Ïπ¥ÌÖåÍ≥†Î¶¨_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(BaseCategoryListInquiry)
            case ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(images: [BaseCategoryImage])
            case Ìè¨ÌÇ∑_Ïò§Î•ò_Ìï∏Îì§ÎßÅ(BaseError)
        }
        
        public enum AsyncAction: Equatable {
            case ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå
        }
        
        public enum ScopeAction: Equatable {
            case profile(ProfileBottomSheet.Delegate)
        }
        
        public enum DelegateAction: Equatable {
            /// Ïù¥Ï†ÑÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞Ä Ïπ¥ÌÖåÍ≥†Î¶¨ Ìï≠Î™©ÏùÑ Ï∂îÍ∞ÄÌïòÎ©¥Îê®
            case settingSuccess(categoryName: String, categoryImageId: Int)
            case linkCopyDetected(URL?)
        }
    }
    
    /// - Initiallizer
    public init() {}

    /// - Reducer Core
    private func core(into state: inout State, action: Action) -> Effect<Action> {
        switch action {
            /// - View
        case .view(let viewAction):
            return handleViewAction(viewAction, state: &state)
            
            /// - Inner
        case .inner(let innerAction):
            return handleInnerAction(innerAction, state: &state)
            
            /// - Async
        case .async(let asyncAction):
            return handleAsyncAction(asyncAction, state: &state)
            
            /// - Scope
        case .scope(let scopeAction):
            return handleScopeAction(scopeAction, state: &state)
            
            /// - Delegate
        case .delegate(let delegateAction):
            return handleDelegateAction(delegateAction, state: &state)
        }
    }
    
    /// - Reducer body
    public var body: some ReducerOf<Self> {
        BindingReducer(action: \.view)
        Reduce(self.core)
            ._printChanges()
    }
}
//MARK: - FeatureAction Effect
private extension PokitCategorySettingFeature {
    /// - View Effect
    func handleViewAction(_ action: Action.View, state: inout State) -> Effect<Action> {
        switch action {
        case .binding:
            return .none
            
        case .dismiss:
            return .run { _ in await dismiss() }
            
        case .profileSettingButtonTapped:
            /// [Profile üé®]1. ÌîÑÎ°úÌïÑ Î™©Î°ù Ï°∞Ìöå API Ìò∏Ï∂ú
            state.isProfileSheetPresented.toggle()
            return .none

        case .saveButtonTapped:
            return .run { [domain = state.domain,
                           type = state.type] send in
                switch type {
                case .Ï∂îÍ∞Ä:
                    guard let image = domain.categoryImage else { return }
                    let request = CategoryEditRequest(categoryName: domain.categoryName, categoryImageId: image.id)
                    let response = try await categoryClient.Ïπ¥ÌÖåÍ≥†Î¶¨_ÏÉùÏÑ±(request)
                    await send(
                        .delegate(
                            .settingSuccess(
                                categoryName: response.categoryName,
                                categoryImageId: response.categoryImage.imageId
                            )
                        )
                    )
                case .ÏàòÏ†ï:
                    guard let categoryId = domain.categoryId else { return }
                    guard let image = domain.categoryImage else { return }
                    let request = CategoryEditRequest(categoryName: domain.categoryName, categoryImageId: image.id)
                    let response = try await categoryClient.Ïπ¥ÌÖåÍ≥†Î¶¨_ÏàòÏ†ï(categoryId, request)
                    await send(
                        .delegate(
                            .settingSuccess(
                                categoryName: response.categoryName,
                                categoryImageId: response.categoryImage.imageId
                            )
                        )
                    )
                case .Í≥µÏú†Ï∂îÍ∞Ä:
                    guard let categoryId = domain.categoryId else { return }
                    guard let image = domain.categoryImage else { return }
                    try await categoryClient.Í≥µÏú†Î∞õÏùÄ_Ïπ¥ÌÖåÍ≥†Î¶¨_Ï†ÄÏû•(
                        .init(
                            originCategoryId: categoryId,
                            categoryName: domain.categoryName,
                            categoryImageId: image.id
                        )
                    )
                    await send(
                        .delegate(
                            .settingSuccess(
                                categoryName: domain.categoryName,
                                categoryImageId: image.id
                            )
                        )
                    )
                }
            } catch: { error, send in
                guard let errorResponse = error as? ErrorResponse else {
                    return
                }
                await send(.inner(.Ìè¨ÌÇ∑_Ïò§Î•ò_Ìï∏Îì§ÎßÅ(.init(response: errorResponse))))
            }
            
        case .onAppear:
            return .run { send in
                let pageRequest = BasePageableRequest(page: 0, size: 100, sort: ["desc"])
                let response = try await categoryClient.Ïπ¥ÌÖåÍ≥†Î¶¨_Î™©Î°ù_Ï°∞Ìöå(pageRequest, true).toDomain()
                await send(.inner(.Ïπ¥ÌÖåÍ≥†Î¶¨_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(response)))
                await send(.async(.ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå))
                
                for await _ in self.pasteboard.changes() {
                    let url = try await pasteboard.probableWebURL()
                    await send(.delegate(.linkCopyDetected(url)), animation: .pokitSpring)
                }
            }
        }
    }
    
    /// - Inner Effect
    func handleInnerAction(_ action: Action.InnerAction, state: inout State) -> Effect<Action> {
        switch action {
        case let .ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(images):
            state.domain.imageList = images

            guard let _ = state.selectedProfile else {
                state.selectedProfile = images.first
                return .none
            }
            return .none
        case let .Ïπ¥ÌÖåÍ≥†Î¶¨_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(response):
            state.domain.categoryListInQuiry = response
            return .none
        case let .Ìè¨ÌÇ∑_Ïò§Î•ò_Ìï∏Îì§ÎßÅ(baseError):
            switch baseError {
            case let .CA_001(message):
                state.pokitNameTextInpuState = .error(message: message)
                return .none
            default: return .none
            }
        }
    }
    
    /// - Async Effect
    func handleAsyncAction(_ action: Action.AsyncAction, state: inout State) -> Effect<Action> {
        switch action {
        case .ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå:
            return .run { send in
                let a = try await categoryClient.Ïπ¥ÌÖåÍ≥†Î¶¨_ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå()
                let b = a.map { $0.toDomain() }
                await send(.inner(.ÌîÑÎ°úÌïÑ_Î™©Î°ù_Ï°∞Ìöå_Í≤∞Í≥º(images: b)))
            }
        }
    }
    
    /// - Scope Effect
    func handleScopeAction(_ action: Action.ScopeAction, state: inout State) -> Effect<Action> {
        switch action {
        case .profile(.imageSelected(let imageInfo)):
            state.isProfileSheetPresented = false
            state.selectedProfile = imageInfo
            return .none
        }
    }
    
    /// - Delegate Effect
    func handleDelegateAction(_ action: Action.DelegateAction, state: inout State) -> Effect<Action> {
        return .none
    }
}
